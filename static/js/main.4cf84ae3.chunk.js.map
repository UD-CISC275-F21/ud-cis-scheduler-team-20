{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","id","Course","Credit","Name","Plan","newData","setNewData","show","setshow","useEffect","console","log","columns","headerName","field","sortable","editable","rowDrag","cellRendererFramework","params","onClick","indexNumber","abc","i","length","j","rowData","data","getIndex","index1","index","newData2","JSON","parse","stringify","splice","e","newData3","actionButton","show1","setShow1","style","textAlign","marginLeft","map","value","className","height","width","columnDefs","rowDragManaged","animateRows","newCourse","tmpNewData","push","addArow","clearAllCourse","addAsemester","Jsondata","localStorage","setItem","getItem","saveData","loadData","JsonData","Alert","variant","Heading","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cf84ae3.chunk.js","sourcesContent":["import React, {useState,useEffect} from \"react\";\r\nimport {AgGridReact} from \"ag-grid-react\";\r\nimport { Alert, Button } from \"react-bootstrap\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\n\r\n\r\n\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nconst App = () => {\r\n\r\n    const [newData,setNewData] = useState([\r\n        {\r\n            \"rowData\":[\r\n                {id:0,Course: \"EGGG101\", Credit: \"2\",Name:\"engineer101\",Plan:\"Take Care\"},\r\n                {id:0,Course: \"CISC108\", Credit: \"3\",Name:\"Computer Science108\",Plan:\"Take Care\"},\r\n                {id:0,Course: \"MATH241\", Credit: \"4\",Name:\"Mathematic241\",Plan:\"Take Care\"},\r\n                {id:0,Course: \"ENGL101\", Credit: \"3\",Name:\"engineer101\",Plan:\"Take Care\"},\r\n                {id:0,Course: \"BRE\", Credit: \"3\",Name:\"Breath\",Plan:\"Take Care\"},\r\n            ], \r\n        },\r\n       \r\n    ]);\r\n    \r\n    const [show,setshow] = useState(false);\r\n \r\n    useEffect(()=>{\r\n        console.log(\"in useeffect\",newData);\r\n        setNewData(newData);\r\n    });\r\n    \r\n\r\n    function getIndex(abc:typeof newData,params: { data: { id: number; Course: string; Credit: string; Name: string; Plan: string; }; }){\r\n        for (let i=0;i<abc.length;i++){\r\n            for(let j = 0;j<abc[i].rowData.length;j++){\r\n                if (abc[i].rowData[j]==params.data){\r\n                    return [i,j] ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    const actionButton = (params: { data: { id: number; Course: string; Credit: string; Name: string; Plan: string; }; })=>{\r\n        console.log(newData);\r\n        const indexNumber = getIndex(newData,params) as number[] ;\r\n        console.log(indexNumber);\r\n        console.log(\"before\",newData);\r\n        const index1 = indexNumber[0];\r\n        const index = indexNumber[1];\r\n        console.log(index1);\r\n        if (indexNumber != null){\r\n            const newData2 :typeof newData= JSON.parse(JSON.stringify(newData));\r\n            newData2[index1].rowData.splice(index,1);\r\n            try{\r\n                setNewData(newData2);\r\n                console.log(\"after\",newData);\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n            const newData3 :typeof newData= JSON.parse(JSON.stringify(newData));\r\n            console.log(\"data3\",newData3);\r\n        }       \r\n    };\r\n\r\n    const addArow = (index: number) => {\r\n        const newCourse = {id:index,Course: \"\", Credit: \"\",Name:\"\",Plan:\"\"};\r\n        console.log(newCourse);\r\n        const tmpNewData = JSON.parse(JSON.stringify(newData));\r\n        tmpNewData[index].rowData.push(newCourse);\r\n        console.log(tmpNewData[index]);\r\n        setNewData(tmpNewData);\r\n        \r\n    };\r\n\r\n    const addAsemester = () =>{\r\n        const tmpNewData = JSON.parse(JSON.stringify(newData));\r\n        const newSemester = {rowData:[]};\r\n        tmpNewData.push(newSemester);\r\n        setNewData(tmpNewData);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            headerName:\"course\",field:\"Course\",sortable:true,editable:true, rowDrag:true\r\n        },\r\n        {\r\n            headerName:\"credit\",field:\"Credit\",sortable:true,editable:true,\r\n        },\r\n        {\r\n            headerName:\"name\",field:\"Name\",sortable:true,editable:true,\r\n        },\r\n        {\r\n            headerName:\"plan\",field:\"Plan\",sortable:true,editable:true,\r\n        },\r\n        {\r\n            headerName:\"action\",\r\n            field:\"Action\",\r\n            cellRendererFramework: (params: { data: { id: number; Course: string; Credit: string; Name: string; Plan: string; }; }) =><div>\r\n                <button onClick={()=>actionButton(params)}>Delete</button>\r\n            </div>,    \r\n        },\r\n    ];\r\n\r\n    const clearAllSemester=()=>{\r\n        const newData1 = [{rowData:[]}];\r\n        setNewData(newData1);\r\n    };\r\n\r\n\r\n    const saveData =() =>{\r\n        const Jsondata = JSON.stringify(newData);\r\n        localStorage.setItem(\"savedData\", Jsondata);\r\n        console.log(localStorage.getItem(\"savedData\"));\r\n    };\r\n\r\n    const loadData =() =>{\r\n        const loadData= localStorage.getItem(\"savedData\");\r\n        const JsonData = JSON.parse(loadData||\"{}\");\r\n        setNewData(JsonData);\r\n        console.log(newData);\r\n    };\r\n\r\n    const clearAllCourse = (index:number)=>{\r\n        const tmpNewData = JSON.parse(JSON.stringify(newData));\r\n        tmpNewData[index].rowData = [];\r\n        setNewData(tmpNewData);\r\n    };\r\n    \r\n    const [show1, setShow1] = useState(true);\r\n\r\n    return (\r\n        <div >\r\n            <h1 style = {{textAlign:\"center\"}}>Plan Course Of Semester</h1>\r\n            <button onClick={()=>setshow(true)} style={{marginLeft:350}}>Make a plan</button>\r\n            \r\n            {\r\n                show?\r\n                    newData.map((value,index) => \r\n                        <div key = {index}>\r\n                            \r\n                            <div className=\"ag-theme-alpine\" style={{height: 400, width: 1000, marginLeft:350}}>\r\n                                \r\n                                <AgGridReact rowData={value.rowData} columnDefs={columns} rowDragManaged={true} animateRows={true}/>\r\n                                \r\n                            </div>\r\n                            \r\n                            <button onClick = {()=>addArow(index)} style={{marginLeft:350}}>AddCourse</button>\r\n                            <button onClick={()=>clearAllCourse(index)}>clear All Course</button>\r\n                            \r\n                        </div>\r\n    \r\n                        \r\n                    )\r\n            \r\n                    :null\r\n\r\n            }\r\n            {\r\n                show?<button onClick={()=>addAsemester()} style={{marginLeft:350}}>Add a Semester</button>:null\r\n            }\r\n            {\r\n                show?<button onClick ={()=>saveData()} style={{marginLeft:350}}>Save</button>:null\r\n            }\r\n            {\r\n                show?<button onClick ={()=>loadData()} style={{marginLeft:350}}>Load</button>:null\r\n            }\r\n            {\r\n                show?<button onClick={()=>clearAllSemester()} style={{marginLeft:350}}>Clear All Semester</button>:null\r\n            }\r\n            <>\r\n                <Alert show={show1} variant=\"success\">\r\n                    <Alert.Heading>Hello There!</Alert.Heading>\r\n                    <p>\r\n                        Thank you for using our website. The current version is the default semester plan, and you can graduate in 4 academic years if things go well. \r\n                        If it is different from the actual situation, you need to edit it manually. This site currently offers adding course semesters and deletion functionality.\r\n                        And you can drag courses in the same table. You can clear all semester and courses.\r\n                    </p>\r\n                    <hr />\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Button onClick={() => setShow1(false)} variant=\"outline-success\">\r\n                            Got!\r\n                        </Button>\r\n                    </div>\r\n                </Alert>\r\n                {!show && <Button onClick={() => setShow1(true)}>Guide</Button>}\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}